Normal Forms

there are 7 normal forms in database normalization
most of them are numbered and refered to by number
abbreviated like 3NF for third normal form & etc

most databases only require third form
each form builds upon the last. a 3NF data set always satisfies 1NF and 2NF

Database Keys

a key is used to identify a record within a file (row within a table)
-primary keys are unique to their own table
  -cannot be null (blank)
  -must be unique
  -should not be changed
  -must be assigned in each new row (often auto-fills in practice)
-foreign keys are used to relate rows in one table to rows in another table
  -do not have to be unique in both tables where they appear
  -a foreign key in one table is a primary key in a different table
  -ex. you might use a customer id to identify all the invoices they've received
-composite keys are when multiple cells must be combined in order to uniquely identify a row
>don't rely on composite keys

First Normal Form - 1NF

-each field only contains one piece of data
-each record is unique

Second Normal Form - 2NF

-all requirements of 1NF
-must have a unique primary key NOT a composite key
-often you will need to divide non-normalized data into multiple tables to achieve this

Third Normal Form - 3NF

-all requirements of 2NF
-no transitive functional dependencies

what does that mean?
-all data in the table should directly reference the primary key
-if key -> valueA and valueA -> valueB. that's bad
-BECAUSE
  -if valueB is changed, then the relationship between the 3 might no longer be correct
  -the relationship between valueA and and valueB should be in its own table

-ex. if object -> price and price -> discount
  -the discounts table should be separated from the objects table
  -using the price as a foreign key